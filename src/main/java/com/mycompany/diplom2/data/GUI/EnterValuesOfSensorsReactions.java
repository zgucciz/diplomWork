/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.diplom2.data.GUI;

import com.mycompany.diplom2.data.Sensors;
import com.mycompany.diplom2.data.SetOfSensors;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author 1
 */
public class EnterValuesOfSensorsReactions extends javax.swing.JFrame {

    /**
     * Creates new form EnterValuesOfSensorsReactions
     */
    SetOfSensors set;
    Double[] resoltSignal;
    
    public EnterValuesOfSensorsReactions(SetOfSensors set) {
        initComponents();
        this.set = set;

        try { 
            tableForm();
        } catch (SQLException ex) {
            Logger.getLogger(EnterValuesOfSensorsReactions.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    public void tableForm() throws SQLException{
        Sensors[] itemsOfSet = set.getSetAsArray();
        int itemsCount = itemsOfSet.length;
        String[] shortNames = new String[itemsCount],
                 columnNames = {"Номер п/п","Сенсор","*Отклик1","Отклик2","Отклик3","Отклик4"};
        Integer[] numbers = new Integer[itemsCount];
        for(int i = 0; i < itemsCount; i++) {
            shortNames[i] = itemsOfSet[i].getSensorShortName();
            numbers[i] = i+1;
        }
        DefaultTableModel tm = new DefaultTableModel(){
            Class[] types = new Class[]{Integer.class, String.class, Double.class, Double.class, Double.class, Double.class};
            boolean[] canEdit = new boolean[]{false,false,true,true,true,true};
            
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
            
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }};
        
        tm.addColumn(columnNames[0], numbers);
        tm.addColumn(columnNames[1], shortNames);
        tm.addColumn(columnNames[2]);
        tm.addColumn(columnNames[3]);
        tm.addColumn(columnNames[4]);
        tm.addColumn(columnNames[5]);
        extendedTable.setModel(tm);

        DefaultTableCellRenderer renderer = new DefaultTableCellRenderer() {
                    @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                javax.swing.JLabel c = (javax.swing.JLabel) super.getTableCellRendererComponent(table, value, isSelected, false, row, column);

                c.setHorizontalAlignment(CENTER);
                if((row+column)%2 == 0) c.setBackground(Color.decode("#E7FBFB"));
                else c.setBackground(Color.white);
                return c;
            }
        };
        extendedTable.setDefaultRenderer(Double.class, renderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        extendedTable = new javax.swing.JTable();
        readyButton = new javax.swing.JButton();
        goBackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(475, 465));
        setPreferredSize(new java.awt.Dimension(475, 465));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        extendedTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(extendedTable);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 429;
        gridBagConstraints.ipady = 400;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        readyButton.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        readyButton.setText("Готово");
        readyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readyButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
        getContentPane().add(readyButton, gridBagConstraints);

        goBackButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        goBackButton.setText("Назад");
        goBackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBackButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 0);
        getContentPane().add(goBackButton, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void goBackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBackButtonActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, 
                                      "Вы уверены, что хотите вернуться к выбору набора?",
                                      "Подтвердите действие",
                                      JOptionPane.YES_NO_OPTION , 
                                      JOptionPane.QUESTION_MESSAGE);
        if(option == JOptionPane.YES_OPTION){
            this.setVisible(false);
            ChooseSetOfSensors.run();
        }
    }//GEN-LAST:event_goBackButtonActionPerformed

    private void readyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readyButtonActionPerformed
        // TODO add your handling code here:
        if(readyButton.getText().equals("Готово")){
            int option = JOptionPane.showConfirmDialog(this, 
                                          "Отклики введены верно?",
                                          "Подтвердите действие",
                                          JOptionPane.YES_NO_OPTION , 
                                          JOptionPane.QUESTION_MESSAGE);
            if(option == JOptionPane.YES_OPTION){
                int countRow = extendedTable.getRowCount();
                Double reactions[][] = new Double[4][countRow];
                int[] enteredCount = new int[]{0,0,0,0};
                for(int i = 0; i < countRow; i++){
                    reactions[0][i] =(Double) ((DefaultTableModel)extendedTable.getModel()).getValueAt(i, 2);
                    reactions[1][i] =(Double) ((DefaultTableModel)extendedTable.getModel()).getValueAt(i, 3);
                    reactions[2][i] =(Double) ((DefaultTableModel)extendedTable.getModel()).getValueAt(i, 4);
                    reactions[3][i] =(Double) ((DefaultTableModel)extendedTable.getModel()).getValueAt(i, 5);
                    if(reactions[0][i] != null) enteredCount[0]++;
                    if(reactions[1][i] != null) enteredCount[1]++;
                    if(reactions[2][i] != null) enteredCount[2]++;
                    if(reactions[3][i] != null) enteredCount[3]++;
                }
                int notEmptyReactionsCount = 1;
                boolean[] notEmptyReactionsFlag = new boolean[]{true,false,false,false};
                try{
                    if(enteredCount[0]<countRow) throw new Exception("Поле Отклик1 должно быть заполнено у всех сенсоров!");

                    if(enteredCount[1] < countRow && enteredCount[1] > 0)
                        throw new Exception("Поле Отклик2 должно быть либо пустым, либо заполнено у всех сенсоров!");
                    else if(enteredCount[1] > 0) {
                        notEmptyReactionsFlag[1] = true;
                        notEmptyReactionsCount++;
                    }

                    if(enteredCount[2] < countRow && enteredCount[2] > 0)
                        throw new Exception("Поле Отклик3 должно быть либо пустым, либо заполнено у всех сенсоров!");
                    else if(enteredCount[2] > 0) {
                        notEmptyReactionsFlag[2] = true;
                        notEmptyReactionsCount++;
                    }

                    if(enteredCount[3] < countRow && enteredCount[3] > 0)
                        throw new Exception("Поле Отклик4 должно быть либо пустым, либо заполнено у всех сенсоров!");
                    else if(enteredCount[3] > 0) {
                        notEmptyReactionsFlag[3] = true;
                        notEmptyReactionsCount++;
                    }
                }catch (Exception e){
                    JOptionPane.showMessageDialog(this, e.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                resoltSignal = new Double[countRow];
                if(notEmptyReactionsCount == 1) 
                    resoltSignal = reactions[0];
                else
                    for(int i = 0; i < countRow; i++){
                        resoltSignal[i] = reactions[0][i];
                        if(notEmptyReactionsFlag[1]) resoltSignal[i] += reactions[1][i];
                        if(notEmptyReactionsFlag[2]) resoltSignal[i] += reactions[2][i];
                        if(notEmptyReactionsFlag[3]) resoltSignal[i] += reactions[3][i];
                        resoltSignal[i] /= notEmptyReactionsCount;
                    }
                ((DefaultTableModel)extendedTable.getModel()).setColumnCount(2);
                ((DefaultTableModel)extendedTable.getModel()).addColumn("Итог", resoltSignal);
                readyButton.setText("Построить график");
            }
        }else{
            this.setVisible(false);
            DiagramFrame.run(set, resoltSignal);
        }
    }//GEN-LAST:event_readyButtonActionPerformed

    /**
     * @param args the command line arguments
     */

    public static void run(SetOfSensors set) {
        EnterValuesOfSensorsReactions frame = new EnterValuesOfSensorsReactions(set);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable extendedTable;
    private javax.swing.JButton goBackButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton readyButton;
    // End of variables declaration//GEN-END:variables
}
